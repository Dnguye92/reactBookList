What Are Reducers?
	- is a function that returns a piece of the application state
	- creating a reducer is a 2-step process
		- creating the reducer
		- wiring it into our application so that it is available from any file
	- you can import the reducer like you would a custom component
	- by passing our reducer as a value of state inside of our combineReducer function we are telling redux how to create our app state
	- we must connect our React views and Redux state to make a useable application
	- we must use the ReactRedux library to merge the two together
	- we're going to change one of our components into a container
		- a container is a react component that has a direct connection to the state managed by Redux

How can we tell which components we need to promote to containers?
	- in general we want to change the most parent component into a container
	- we are going to make BookList and BookDetail containers
	- whenever we forge a connection between a component and Redux we are turning that component into a container or smart component
	- pulling the connect property from the react-redux library. This will help us forge the connection
	- connect takes two separate arguments
		- a function
		- a component
			- this produces a container

Review flow of application
	- redux serves to construct app state and react constructs app views
	- app state is generated by reducer functions
		- i.e BookReducer
		- we added this reducer to the combineReducers function as a value of the key 'books'
		- this key is now a part of the global application state

Action and Action Creators
	- these change the state of our application
	- a majority of the things that happen in a Redux app happen from a user driven event
	- these direct or indirect events can optionally call an action creator
		- an action creator is a function that returns an action
		- this action that is returned is an object
		- the object is automatically sent to all of the reducers in our app
		- reducers can choose what to return a different piece of state depending on what the action was
		- this new state gets piped into the App state and then the App state gets piped into React app which causes all of our components to re-render

Building an Action Creator
	- we're importing the bindActionCreators function the Redux library to ensure that our actions get passed through all of the reducers

Consuming Actions in Reducers
	- all reducers take two arguments
	- most redux reducers are set up with JS switch statements
	- we're making ActiveBook component a container
	- 
		- current state and action
	- never mutate current state to return new state

Conditional Rendering
	- 